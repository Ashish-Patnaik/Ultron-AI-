import express from 'express';
import { z } from 'zod';

const tradingViewAlertSchema = z.object({
  symbol: z.string(),
  price: z.number(),
  action: z.enum(["buy", "sell", "alert"]),
  strategy: z.string().optional(),
  message: z.string().optional(),
});

async function startServer() {
  // @ts-ignore - This file is generated by 'mastra build' and will exist at runtime
  const mastraApp = (await import('../.mastra/output/index.mjs')).default;
  const mastra = mastraApp.mastra;

  const app = express();
  app.use(express.json());
  const PORT = process.env.PORT || 5001;

  app.post('/webhook/tradingview', async (req, res) => {
    console.log('✅ Received TradingView webhook:', req.body);
    try {
      const validatedData = tradingViewAlertSchema.parse(req.body);
      console.log('✅ Data validated successfully.');

      const workflowToRun = mastra.workflows.tradingWorkflow;
      if (!workflowToRun) {
        throw new Error("Could not find workflow: tradingWorkflow");
      }
      
      console.log("🚀 Triggering workflow...");
      // Using .runs.run() as shown to be correct for your Mastra version.
      workflowToRun.runs.run(validatedData).catch((e: Error) => console.error("Workflow Error:", e.message));

      return res.status(200).json({ success: true, message: 'Alert received and analysis triggered.' });
    } catch (error: any) {
      console.error('❌ Error processing webhook:', error);
      return res.status(400).json({ success: false, message: 'Invalid data', error: error.issues || error.message });
    }
  });

  app.listen(PORT, () => {
    console.log(`🚀 Webhook Listener is running on http://localhost:${PORT}`);
    console.log("💡 The Mastra Playground is NOT served by this process.");
    console.log("💡 To use the Playground, run 'npm run dev' in a separate terminal.");
  });
}

startServer().catch(e => {
  console.error("❌ Failed to start Webhook Listener:", e);
  console.error("💡 TIP: Did you run 'npm run build' first?");
});